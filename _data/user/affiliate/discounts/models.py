"""Pydantic models for affiliate discount codes."""

from datetime import datetime
from decimal import Decimal
from typing import List, Optional, Dict, Any, Union
from pydantic import BaseModel, Field, validator, root_validator

from ....discounts.models import BaseDiscount
from ....discounts.enums import DiscountType, DiscountScope


class AffiliateDiscountBase(BaseDiscount):
    """Base model for affiliate discount codes."""
    
    affiliate_id: str = Field(
        ...,
        description="ID of the affiliate who owns this code"
    )
    scope: DiscountScope = Field(
        DiscountScope.AFFILIATE,
        description="Scope of the discount's applicability"
    )
    is_auto_generated: bool = Field(
        False,
        description="Whether this code was auto-generated by the system"
    )
    campaign_name: Optional[str] = Field(
        None,
        max_length=100,
        description="Name of the marketing campaign this code belongs to"
    )
    allowed_products: List[str] = Field(
        default_factory=list,
        description="List of product IDs this code applies to (empty = all products)"
    )
    excluded_products: List[str] = Field(
        default_factory=list,
        description="List of product IDs this code does not apply to"
    )
    allowed_categories: List[str] = Field(
        default_factory=list,
        description="List of category IDs this code applies to (empty = all categories)"
    )
    excluded_categories: List[str] = Field(
        default_factory=list,
        description="List of category IDs this code does not apply to"
    )
    
    class Config:
        json_encoders = {
            Decimal: str
        }


class AffiliateDiscountCreate(BaseModel):
    """Model for creating a new affiliate discount code."""
    
    code: str = Field(
        ..., 
        min_length=4, 
        max_length=50, 
        regex=r'^[A-Z0-9_-]+$',
        description="Unique discount code (uppercase alphanumeric with hyphens/underscores)"
    )
    description: Optional[str] = Field(
        None, 
        max_length=500,
        description="Description of the discount code"
    )
    discount_type: DiscountType = Field(
        ...,
        description="Type of discount (percentage or fixed amount)"
    )
    discount_value: Decimal = Field(
        ..., 
        gt=0,
        description="The value of the discount (percentage or fixed amount)"
    )
    max_uses: Optional[int] = Field(
        None, 
        gt=0,
        description="Maximum number of times this code can be used"
    )
    start_date: datetime = Field(
        default_factory=datetime.utcnow,
        description="When the discount code becomes active"
    )
    end_date: Optional[datetime] = Field(
        None,
        description="When the discount code expires (None = no expiration)"
    )
    min_purchase_amount: Optional[Decimal] = Field(
        None, 
        gt=0,
        description="Minimum purchase amount required to use this code"
    )
    campaign_name: Optional[str] = Field(
        None,
        max_length=100,
        description="Name of the marketing campaign this code belongs to"
    )
    allowed_products: List[str] = Field(
        default_factory=list,
        description="List of product IDs this code applies to (empty = all products)"
    )
    excluded_products: List[str] = Field(
        default_factory=list,
        description="List of product IDs this code does not apply to"
    )
    allowed_categories: List[str] = Field(
        default_factory=list,
        description="List of category IDs this code applies to (empty = all categories)"
    )
    excluded_categories: List[str] = Field(
        default_factory=list,
        description="List of category IDs this code does not apply to"
    )
    
    @validator('discount_value')
    def validate_discount_value(cls, v: Decimal, values: Dict[str, Any]) -> Decimal:
        """Validate discount value based on discount type."""
        if 'discount_type' in values and values['discount_type'] == DiscountType.PERCENTAGE:
            if v > 100:
                raise ValueError('Percentage discount cannot exceed 100%')
        return v
    
    class Config:
        json_encoders = {
            Decimal: str
        }
        schema_extra = {
            "example": {
                "code": "AFFILIATE10",
                "description": "Affiliate 10% Off",
                "discount_type": "percentage",
                "discount_value": "10.00",
                "max_uses": 100,
                "start_date": "2023-01-01T00:00:00Z",
                "end_date": "2023-12-31T23:59:59Z",
                "min_purchase_amount": "25.00",
                "campaign_name": "summer_sale_2023",
                "allowed_products": ["prod_123", "prod_456"],
                "excluded_products": ["prod_789"],
                "allowed_categories": ["clothing"],
                "excluded_categories": ["sale"]
            }
        }


class AffiliateDiscountUpdate(BaseModel):
    """Model for updating an existing affiliate discount code."""
    
    description: Optional[str] = Field(
        None, 
        max_length=500,
        description="Updated description of the discount code"
    )
    max_uses: Optional[int] = Field(
        None, 
        gt=0,
        description="Updated maximum number of times this code can be used"
    )
    end_date: Optional[datetime] = Field(
        None,
        description="Updated expiration date (None = no expiration)"
    )
    is_active: Optional[bool] = Field(
        None,
        description="Whether the discount code is currently active"
    )
    min_purchase_amount: Optional[Decimal] = Field(
        None, 
        gt=0,
        description="Updated minimum purchase amount required"
    )
    campaign_name: Optional[str] = Field(
        None,
        max_length=100,
        description="Updated campaign name"
    )
    allowed_products: Optional[List[str]] = Field(
        None,
        description="Updated list of allowed product IDs"
    )
    excluded_products: Optional[List[str]] = Field(
        None,
        description="Updated list of excluded product IDs"
    )
    allowed_categories: Optional[List[str]] = Field(
        None,
        description="Updated list of allowed category IDs"
    )
    excluded_categories: Optional[List[str]] = Field(
        None,
        description="Updated list of excluded category IDs"
    )
    
    class Config:
        json_encoders = {
            Decimal: str
        }


class AffiliateDiscount(AffiliateDiscountBase):
    """Complete affiliate discount model with all fields."""
    
    id: str = Field(
        ...,
        description="Unique identifier for the discount code"
    )
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="When the discount code was created"
    )
    updated_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="When the discount code was last updated"
    )
    
    class Config:
        json_encoders = {
            Decimal: str
        }
        schema_extra = {
            "example": {
                "id": "disc_1234567890",
                "code": "AFFILIATE10",
                "affiliate_id": "aff_12345",
                "description": "Affiliate 10% Off",
                "discount_type": "percentage",
                "discount_value": "10.00",
                "scope": "affiliate",
                "is_auto_generated": False,
                "campaign_name": "summer_sale_2023",
                "max_uses": 100,
                "used_count": 5,
                "start_date": "2023-01-01T00:00:00Z",
                "end_date": "2023-12-31T23:59:59Z",
                "is_active": True,
                "min_purchase_amount": "25.00",
                "created_at": "2023-01-01T00:00:00Z",
                "updated_at": "2023-06-15T12:34:56Z",
                "allowed_products": ["prod_123", "prod_456"],
                "excluded_products": ["prod_789"],
                "allowed_categories": ["clothing"],
                "excluded_categories": ["sale"]
            }
        }
